!(function (global, factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
      // AMD (Asynchronous Module Definition)
      define(["jquery"], factory);
    } else if (typeof module !== "undefined" && module.exports) {
      // CommonJS (for Node.js)
      module.exports = factory(require("jquery"));
    } else {
      // Global scope (browser)
      factory(jQuery);
    }
  })(function ($) {
    "use strict";
  
    function parseDate(input) {
      if (input instanceof Date) return input;
      if (String(input).match(dateRegex)) {
        input = input.match(/^\d+$/) ? Number(input) : input.replace(/-/g, "/");
        return new Date(input);
      }
      throw new Error("Invalid date format: " + input);
    }
  
    function escapeRegExp(text) {
      return text.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
  
    function formatDateTokens(offset) {
      return function (template) {
        return template.replace(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi, function (match) {
          var parts = match.match(/%(-|!)?([a-zA-Z])(:[^;]+;)?/);
          var prefix = parts[1] || "";
          var key = parts[2];
          var format = parts[3] || "";
  
          if (dateTokens.hasOwnProperty(key)) {
            var value = Number(offset[dateTokens[key]]);
            if ("!" === prefix) value = pluralize(format, value);
            else if (value < 10) value = "0" + value;
            return value.toString();
          }
          return match;
        });
      };
    }
  
    function pluralize(format, value) {
      let [singular, plural] = format.replace(/(:|;|\s)/g, "").split(",");
      return Math.abs(value) > 1 ? plural : singular || "";
    }
  
    var instances = [];
    var dateRegex = new RegExp([
      "^[0-9]*$",
      "([0-9]{1,2}/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?",
      "[0-9]{4}([/-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?",
    ].join("|"));
  
    var dateTokens = {
      Y: "years",
      m: "months",
      n: "daysToMonth",
      d: "daysToWeek",
      w: "weeks",
      W: "weeksToMonth",
      H: "hours",
      M: "minutes",
      S: "seconds",
      D: "totalDays",
      I: "totalHours",
      N: "totalMinutes",
      T: "totalSeconds",
    };
  
    var defaults = { precision: 100, elapse: false, defer: false };
  
    function Countdown(element, finalDate, options) {
      this.el = element;
      this.$el = $(element);
      this.options = $.extend({}, defaults, options);
      this.interval = null;
      this.firstTick = true;
      this.instanceIndex = instances.length;
      instances.push(this);
  
      this.$el.data("countdown-instance", this.instanceIndex);
      this.setFinalDate(finalDate);
  
      if (!this.options.defer) this.start();
    }
  
    $.extend(Countdown.prototype, {
      start: function () {
        if (this.interval) clearInterval(this.interval);
        this.update();
        this.interval = setInterval(this.update.bind(this), this.options.precision);
      },
      stop: function () {
        clearInterval(this.interval);
        this.interval = null;
        this.dispatchEvent("stopped");
      },
      toggle: function () {
        this.interval ? this.stop() : this.start();
      },
      pause: function () {
        this.stop();
      },
      resume: function () {
        this.start();
      },
      remove: function () {
        this.stop();
        instances[this.instanceIndex] = null;
        this.$el.removeData("countdown-instance");
      },
      setFinalDate: function (finalDate) {
        this.finalDate = parseDate(finalDate);
      },
      update: function () {
        if (!$.contains(document.documentElement, this.el)) {
          this.remove();
          return;
        }
  
        var now = new Date();
        var diff = Math.ceil((this.finalDate.getTime() - now.getTime()) / 1000);
        if (!this.options.elapse && diff < 0) diff = 0;
  
        if (this.totalSecsLeft === diff && !this.firstTick) return;
        this.firstTick = false;
        this.totalSecsLeft = diff;
        this.elapsed = now >= this.finalDate;
  
        this.offset = {
          seconds: diff % 60,
          minutes: Math.floor(diff / 60) % 60,
          hours: Math.floor(diff / 3600) % 24,
          days: Math.floor(diff / 86400) % 7,
          daysToWeek: Math.floor(diff / 86400) % 7,
          daysToMonth: Math.floor(diff / 86400) % 30.4368,
          weeks: Math.floor(diff / 604800),
          weeksToMonth: Math.floor(diff / 604800) % 4,
          months: Math.floor(diff / 2629743),
          years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
          totalDays: Math.floor(diff / 86400),
          totalHours: Math.floor(diff / 3600),
          totalMinutes: Math.floor(diff / 60),
          totalSeconds: diff,
        };
  
        this.dispatchEvent(diff ? "update" : "finish");
        if (!diff) this.stop();
      },
      dispatchEvent: function (eventType) {
        var event = $.Event(eventType + ".countdown");
        event.finalDate = this.finalDate;
        event.elapsed = this.elapsed;
        event.offset = $.extend({}, this.offset);
        event.strftime = formatDateTokens(this.offset);
        this.$el.trigger(event);
      },
    });
  
    $.fn.countdown = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      return this.each(function () {
        var instance = $(this).data("countdown-instance");
        if (instance !== undefined) {
          var countdownInstance = instances[instance];
          var method = args[0];
  
          if (Countdown.prototype.hasOwnProperty(method)) {
            countdownInstance[method].apply(countdownInstance, args.slice(1));
          } else if (!String(method).match(/^[$A-Z_][0-9A-Z_$]*$/i)) {
            countdownInstance.setFinalDate.call(countdownInstance, method);
            countdownInstance.start();
          } else {
            $.error("Method " + method + " does not exist on jQuery.countdown");
          }
        } else {
          new Countdown(this, args[0], args[1]);
        }
      });
    };
  });
   